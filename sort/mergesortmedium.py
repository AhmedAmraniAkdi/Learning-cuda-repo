import random as rnd
rnd.seed(0)

#B = [i for i in range(0, 512)]
#A = [i for i in range(0, 512)]
OUT = [0] * 256
d_input = [38,39,246,133,151,21,173,29,210,148,221,196,118,25,57,49,241,173,181,88,240,147,151,50,25,43,209,192,253,22,142,78,
72,155,11,245,59,73,168,99,93,222,63,223,109,104,180,135,154,170,205,220,247,193,68,129,41,8,27,64,98,56,48,78,
148,212,17,208,222,196,17,157,75,63,156,70,187,239,199,84,33,80,43,208,239,90,244,9,207,95,53,145,148,54,127,137,
112,153,177,30,103,204,17,84,3,127,156,3,74,246,155,30,237,103,119,59,194,164,206,80,116,249,198,187,122,88,162,134,
69,179,147,232,190,170,208,15,239,102,232,28,0,197,87,112,102,183,88,38,87,232,251,224,129,159,119,199,251,230,193,205,
124,235,94,54,203,166,117,86,118,188,40,156,199,163,36,207,244,7,119,152,150,109,163,65,92,23,240,188,1,39,6,231,
123,7,186,14,118,7,41,177,0,72,3,136,134,218,42,197,255,33,124,153,103,125,236,249,111,41,216,162,115,100,151,91,
172,207,81,122,167,23,19,169,245,211,34,234,37,176,144,217,239,203,14,49,178,94,1,146,33,159,216,130,56,229,156,177,
118,13,200,129,70,28,92,197,190,37,45,201,139,110,127,148,44,206,213,105,95,89,8,148,217,64,151,99,58,242,62,114,
64,135,202,43,59,95,43,142,193,6,203,46,162,91,30,124,30,242,123,72,86,182,42,133,1,211,190,77,96,211,164,37,
116,6,253,129,110,40,169,139,103,62,164,32,81,193,150,27,46,254,165,215,128,189,142,239,0,33,244,72,146,207,248,82,
121,82,9,138,199,191,253,68,24,148,97,167,128,230,14,249,194,188,253,29,195,182,93,89,62,242,226,93,184,47,95,129,
183,51,151,79,47,107,81,65,61,210,170,203,23,19,175,156,68,242,43,34,8,232,190,76,35,13,47,147,187,60,3,59,
150,113,79,214,140,117,202,11,60,190,38,149,255,144,161,142,26,105,215,238,56,156,218,79,23,60,132,243,129,59,12,7,
126,211,216,41,200,37,146,41,127,33,126,12,30,165,11,87,174,233,168,138,57,26,216,234,130,69,137,131,243,119,162,110,
215,35,219,80,201,195,209,35,108,194,90,57,93,154,21,125,102,58,70,253,245,170,225,165,204,241,229,77,249,55,235,247,
9,39,255,81,121,151,174,130,109,107,96,34,164,182,233,138,172,35,90,79,82,148,29,9,93,8,65,89,124,194,18,42,
124,168,237,54,190,233,82,204,233,226,59,209,220,67,172,6,231,109,140,136,58,31,179,157,157,82,68,173,98,97,61,143,
152,109,76,7,130,0,229,140,72,240,145,78,235,135,137,119,126,224,131,177,148,148,204,233,245,151,151,83,149,92,149,175,
198,64,197,202,172,37,142,71,241,93,11,159,187,203,166,103,219,68,232,210,72,59,143,118,203,158,225,83,251,251,65,17,
108,231,0,137,36,160,117,135,78,241,80,206,51,86,43,93,101,97,98,241,61,92,37,203,136,48,203,179,126,134,105,61,
244,43,164,75,210,185,195,211,198,116,9,227,58,114,65,226,132,255,154,24,93,63,181,113,149,21,253,125,5,68,55,188,
196,212,89,25,158,184,160,180,193,173,221,228,186,101,16,125,160,229,55,78,143,44,104,238,88,21,30,185,119,126,209,21,
70,170,201,250,112,228,51,177,167,101,117,219,154,120,191,182,33,220,226,156,187,106,102,204,59,247,214,109,190,124,95,208,
224,117,154,246,48,134,165,82,225,100,120,207,194,243,118,21,112,172,67,8,201,66,214,146,165,133,207,163,193,134,10,118,
252,252,116,21,198,230,29,31,213,114,143,201,25,30,95,35,243,29,1,157,162,252,224,201,254,133,174,98,104,228,249,142,
1,8,0,96,26,76,196,161,236,87,98,208,137,64,159,103,19,246,197,96,44,224,174,248,173,192,30,179,155,221,86,160,
87,97,229,222,20,0,194,95,142,218,152,236,250,163,97,105,56,1,54,91,80,53,101,167,28,254,197,156,66,186,70,52,
102,207,204,151,157,73,62,225,36,197,217,37,82,141,203,178,203,4,253,149,247,69,48,95,178,7,75,40,69,196,243,211,
149,26,93,148,155,113,96,176,20,222,207,132,122,71,5,201,50,200,193,22,7,86,53,166,215,162,89,92,140,64,133,4,
78,9,63,220,248,190,82,83,200,238,32,16,90,25,56,54,215,21,43,231,106,177,156,7,243,153,151,66,0,121,36,80,
249,101,27,119,154,121,57,82,166,188,116,210,218,74,140,130,32,179,227,15,6,158,142,7,110,178,172,225,135,182,246,62]
d_input = sorted(d_input[0:512]) + sorted(d_input[512:1024])
A = [0] * 256
B = [0] * 256
length = 512
result = []
offset_smem_A = 256
offset_smem_B = 256
offset_sums_A = -256
offset_sums_B = -256
pairs_per_block = length * 2 // 256

x = [0] * 32
y = [0] * 32

    
def move(j):
    global offset_sums_A
    global offset_sums_B
    global offset_smem_A
    global offset_smem_B
    global A
    global B

    if(j == 1):
        print("1\n")
        print(A[offset_smem_A:])
        print(B[offset_smem_B:])
        print("\n")

    for i in range(0, 256 - offset_smem_A):
        A[i] = A[offset_smem_A + i]
    for i in range(0, 256 - offset_smem_B):
        B[i] = B[offset_smem_B + i]

    if(j == 1):
        print("2\n")
        print(A)
        print(B)
        print("\n")

def refill(j, thread):
    global offset_sums_A
    global offset_sums_B
    global offset_smem_A
    global offset_smem_B
    global A
    global B

    gmem_offset = 0
    if(thread == 0):
        if(offset_sums_A >= length):
            offset_sums_A = 512
        else:
            offset_sums_A = offset_sums_A + offset_smem_A
        
        if(offset_sums_B >= length):
            offset_sums_B = 512
        else:
            offset_sums_B = offset_sums_B + offset_smem_B
    
    # works for this case
    for i in range(thread + 256 - offset_smem_A, 256, 32):
        if(offset_sums_A + i >= length):
            A[i] = 10000
        else: 
            A[i] = d_input[gmem_offset + offset_sums_A + i]

    for i in range(thread + 256 - offset_smem_B, 256, 32): 
        if(offset_sums_B + i >= length):
            B[i] = 10000
        else: 
            B[i] = d_input[gmem_offset + offset_sums_B + length + i]



def seq_merge(Out, offset, A, x1, x2, B, y1, y2):

    item_A = A[x1]
    item_B = B[y1]

    for i in range(0, 8):

        p = (y1 < y2) and ((x1 >= x2) or item_B <= item_A)

        if(p):
            mergeitem = item_B; 
            y1 = y1 + 1
            if y1 < y2:
                item_B = B[y1];  
        else:
            mergeitem = item_A
            x1 = x1 + 1
            if x1 < x2:
                item_A = A[x1]; 
    
        Out[i + offset] = mergeitem

for j in range(0, length * 2 // 256):
    i = 0
    move(j)
    for thread in range(0 , 32):
        refill(j, thread)

    print("A B offsets")
    print(A)
    print(B)
    print(j, offset_sums_A, offset_sums_B)
    print("******")

    for thread in range(0, 32):

        diag = (thread + 1) * 256 // 32
        if( diag > 256):
            atop = length
            btop = diag - length
        else:
            atop = diag
            btop = 0
        abot = btop

        while(1):
            offset = (atop - abot)//2
            ai = atop - offset
            bi = btop + offset

            if (ai >= length or bi == 0 or A[ai] > B[bi - 1]):
                if(ai == 0 or bi >= length or A[ai - 1] <= B[bi]):
                    x[thread] = ai
                    y[thread] = bi
                    break
                else:
                    atop = ai - 1
                    btop = bi + 1
            else :
                abot = ai + 1
        
    offset_smem_A = x[31]
    offset_smem_B = y[31]

    for thread in range(0, 32):
        x2 = x[thread]
        y2 = y[thread]
        if(thread == 0):
            x1 = 0
            y1 = 0
        else:
            x1 = x[thread - 1]
            y1 = y[thread - 1]
    
        print("t x y", thread, x1, x2, y1, y2)
        seq_merge(OUT, thread * 8, A, x1, x2, B, y1, y2)
    
    print("OUT")
    print(OUT)
    print("******")
    result = result + OUT
    print("********")
    print("x y")
    print(x)
    print(y)
    print("**********")

print("**************")
for i in range(0, 1024):
    if(i%32 == 0):
        print('\n',i,'\n')
    if(i%8 == 0):
        print('-- ', end=' ')
    print(result[i], end=' ')

print("\n", result == sorted(result))







    
